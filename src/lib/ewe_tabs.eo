class Ewe_Tabs (Elm.Layout)
{
   eo_prefix: ewe_obj_tabs;
   data: Ewe_Tabs_Smart_Data;
   methods {
      @property items_list {
         get {
         /*@
          Get internal items list.

          @param obj The tabs object
          @return list of items on success, NULL otherwise
          @ingroup tabs*/
         }
         values {
            items: const(Eina_List)*;
         }
      }
      @property active_item {
         set {
         /*@
          Activate tabs item.

          @return EINA_TRUE on success, EINA_FALSE otherwise

          @ingroup tabs*/
         return: Eina_Bool;
         }
         get {
         /*@
          Get active item.

          @param obj The tabs object
          @return active item on success, NULL otherwise*/
         }
         values {
            item: Ewe_Tabs_Item*;
         }
      }
      @property item_title {
         set {
         /*@
          Set title of the tabs item.

          @return EINA_TRUE on success, EINA_FALSE otherwise

          @ingroup tabs*/
         return: Eina_Bool;
         }
         get {
         /*@
          Get title of the tabs item.

          @return items title on success, NULL otherwise

          @ingroup tabs*/
         }
         keys {
            item: Ewe_Tabs_Item* @nonull;
         }
         values {
            title: Eina_Stringshare*;
         }
      }
      @property item_disabled {
         set {
         /*@
          Enables or disables tabs item.

          Notes: user cannot switch to disabled tabs item.
          If it is active allready or is activated from code
          items content will be also rendered disabled.

          @return EINA_TRUE on success, EINA_FALSE otherwise

          @ingroup tabs*/
         return: Eina_Bool;
         }
         get {
         /*@
          Get items disabled state.

          @return EINA_TRUE if item is disabled, EINA_FALSE otherwise

          @ingroup tabs*/
         }
         keys {
            item: Ewe_Tabs_Item* @nonull;
         }
         values {
            disabled: bool;
         }
      }
      @property orient_horizontal {
         set {
         /*@
          Set horizontal or vertical orient for tabs.

          @return EINA_TRUE on success, EINA_FALSE otherwise

          @ingroup tabs*/
         return: Eina_Bool;
         }
         get {
         /*@
          Get tabs orient.

          @return EINA_TRUE if tabs are horizontal, EINA_FALSE otherwise

          @ingroup tabs*/
         }
         values {
            orient: bool;
         }
      }
      item_append {
         /*@
          Add an item after specified item.
          If no item specified adds as last.

          @return The new tabs item object or NULL if it cannot be created

          @ingroup tabs*/
         return: Ewe_Tabs_Item *;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
            @in title: Eina_Stringshare*; /*@New items title*/
            @in style: Eina_Stringshare*; /*@New items style*/
         }
      }
      item_prepend {
         /*@
          Add an item before specified item.
          If no item specified adds as first.

          @return The new tabs item object or NULL if it cannot be created

          @ingroup tabs*/
         return: Ewe_Tabs_Item *;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
            @in title: Eina_Stringshare*; /*@New items title*/
            @in style: Eina_Stringshare*; /*@New items style*/
         }
      }
      item_del {
         /*@
          Delete tabs item.

          @return EINA_TRUE on success, EINA_FALSE otherwise

          @ingroup tabs*/
         return: Eina_Bool;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
         }
      }
      item_content_set {
        /*@
         Set content to tabs item

         @return EINA_TRUE on success, EINA_FALSE otherwise

         @ingroup tabs*/
         return: Eina_Bool;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
            @in content: Evas_Object*; /*@New items content*/
         }
      }
      item_content_get {
        /*@
         Get content from tabs item

         @return Evas_Object pointer to content of item on success, NULL otherwise

         @ingroup tabs*/
         return: const(Evas_Object) *;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
         }
      }
      item_content_unset {
        /*@
         Unset content from tabs item

         @return Evas_Object *content

         @ingroup tabs*/
         return: Evas_Object *;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
         }
      }
      item_icon_set {
        /*@
         Set icon to tabs item

         @return EINA_TRUE on success, EINA_FALSE otherwise

         @ingroup tabs*/
         return: Eina_Bool;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
            @in icon: Evas_Object*; /*@New items icon*/
         }
      }
      item_icon_unset {
        /*@
         Unset icon from tabs item

         @return Evas_Object *icon

         @ingroup tabs*/
         return: Evas_Object *;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
         }
      }
      item_button_set {
        /*@
         Set button to tabs item

         @return EINA_TRUE on success, EINA_FALSE otherwise

         @ingroup tabs*/
         return: Eina_Bool;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
            @in button: Evas_Object*; /*@New items button*/
         }
      }
      item_button_unset {
        /*@
         Unset button from tabs item

         @return Evas_Object *button

         @ingroup tabs*/
         return: Evas_Object *;
         params {
            @in item: Ewe_Tabs_Item*; /*@The tabs item*/
         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Evas.Object_Smart.del;
      Evas.Object_Smart.add;
      Evas.Object_Smart.resize;
      Evas.Object_Smart.move;
      Evas.Object_Smart.show;
      Evas.Object_Smart.hide;
      Elm.Widget.style;
      Elm.Layout.text_set;
      Elm.Layout.text_get;
   }
   events {
      item,activated;
      item,deactivated;
   }
}
