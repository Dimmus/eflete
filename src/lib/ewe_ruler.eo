class Ewe_Ruler (Elm.Widget)
{
   eo_prefix: ewe_obj_ruler;
   data: Ewe_Ruler_Smart_Data;
   methods {
      @property horizontal {
         get {
            [[Get the ruler orientation
            ]]
         }
         set {
            [[Change the ruler's orientation to horizontal or vertical.
            ]]
          return: Eina_Bool; [[EINA_TRUE if orientation was set or EINA_FALSE on failure.]]
         }
         values {
           horizontal: Eina_Bool;
         }
      }
      @property step {
         set {
            [[Set step between marks of the ruler.
            ]]
          return: Eina_Bool; [[EINA_TRUE if step was set or EINA_FALSE on failure.]]
         }
         get {
            [[Get step between marks of the ruler.
            ]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           step: uint;
         }
      }
      @property value_step {
         get {
            [[Get step between marks values of the ruler.
            ]]
         }
         set {
            [[Set step between marks values of the scale
            ]]
          return: Eina_Bool; [[ EINA_TRUE if step was set or EINA_FALSE on failure.]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           step: double;
         }
      }
      @property zero_offset {
         get {
            [[Get "zero pointer" mark position
            ]]
         }
         set {
            [[Change the ruler's "zero pointer" mark position
            ]]
         return: Eina_Bool; [[EINA_TRUE if offset was set or EINA_FALSE on failure.]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           offset: int;
         }
      }
      @property format {
         get {
         [[
          Get format string of given scale.
         ]]
         }
         set {
         [[
          Set format string for given scale
         ]]
         return: Eina_Bool; [[EINA_TRUE if format was setted or EINA_FALSE on failure.]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           format: const(char)*;
         }
      }
      @property style {
         get {
         [[
          Get style of given scale.
         ]]
         }
         set {
         [[
          Set style for given scale
         ]]
         return: Eina_Bool; [[EINA_TRUE if style was setted or EINA_FALSE on failure.]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           style: const(char)*;
         }
      }
      @property scale_visible {
         get {
         [[
          Get visibility of given scale
         ]]
         }
         set {
         [[
          Change the scale's visibility
         ]]
         return: Eina_Bool; [[EINA_TRUE if offset was set or EINA_FALSE on failure.]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           visible: Eina_Bool;
         }
      }
      @property scale_middle_mark {
         get {
         [[
          Get visibility of middle mark in given scale
         ]]
         }
         set {
         [[
          Change the scale middle mark visibility
         ]]
         return: Eina_Bool; [[ EINA_TRUE if middle_mark was set or EINA_FALSE on failure.]]
         }
         keys {
           scale: Ewe_Ruler_Scale*;
         }
         values {
           middle_mark: Eina_Bool;
         }
      }
      @property marker_relative {
         get {
         [[
          Get marker position relative to given scale
         ]]
         }
         set {
         [[
          Set marker to folow specified value on given scale
         ]]
         return: Eina_Bool; [[ EINA_TRUE if position was set or EINA_FALSE on failure.]]
         }
         keys {
           marker: Ewe_Ruler_Marker*;
           scale: Ewe_Ruler_Scale*;
         }
         values {
           rel_position: double;
         }
      }
      @property marker_absolute {
         get {
         [[
          Get marker position
         ]]
         }
         set {
         [[
          Set marker absolute posiiton
         ]]
         return: Eina_Bool; [[ EINA_TRUE if position was set or EINA_FALSE on failure.]]
         }
         keys {
           marker: Ewe_Ruler_Marker*;
         }
         values {
           position: int;
         }
      }
      @property marker_visible {
         get {
         [[
          Get visibility of given marker
         ]]
         }
         set {
         [[
          Change the marker's visibility
         ]]
         return: Eina_Bool; [[EINA_TRUE if visibility was set or EINA_FALSE on failure.]]
         }
         keys {
           marker: Ewe_Ruler_Marker*;
         }
         values {
           visible: Eina_Bool;
         }
      }
      @property marker_style {
         get {
         [[
          Get style of given marker.
         ]]
         }
         set {
         [[
          Set style for given marker
         ]]
         return: Eina_Bool; [[ EINA_TRUE if style was setted or EINA_FALSE on failure.]]
         }
         keys {
           marker: Ewe_Ruler_Marker*;
         }
         values {
           style: const(char)*;
         }
      }
      scale_add {
         [[
          Add new scale to ruler.
         ]]
         return: Ewe_Ruler_Scale *; [[ Scale object or NULL on failure.]]
         params {
            style: const(char)*;
         }
      }
      scale_del {
         [[
          Delete given scale from ruler.
         ]]
         return: Eina_Bool; [[ EINA_TRUE on success, EIAN_FALSE on failure.]]
         params {
            scale: Ewe_Ruler_Scale*;
         }
      }
      marker_add {
         [[
          Add new marker to ruler.
         ]]
         return: Ewe_Ruler_Marker *; [[ Marker object or NULL on failure.]]
         params {
            style: const(char)*;
         }
      }
      marker_del {
         [[
          Delete given marker from ruler.
         ]]
         return: Eina_Bool; [[ EINA_TRUE on success, EIAN_FALSE on failure.]]
         params {
            marker: Ewe_Ruler_Marker*;
         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Evas.Object_Smart.add;
      Evas.Object_Smart.del;
      Evas.Object_Smart.resize;
      Evas.Object_Smart.calculate;
      Evas.Object_Smart.move;
      Evas.Object_Smart.show;
      Evas.Object_Smart.hide;
      Elm.Widget.theme_apply;
   }
   events {
   }
}
