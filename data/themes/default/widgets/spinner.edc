#define BUTTON(NAME, IMAG, IMAG2, REL, RELTO, MAX) \
   part { \
      name: NAME; \
      type: IMAGE; \
      description { \
         state: "default" 0.0; \
         image.normal: IMAG; \
         align: 1.0 1.0; \
         min: MAX; \
         max: MAX; \
      rel2 { \
            relative: REL; \
            to: RELTO; \
         } \
      } \
      description { \
         state: "new" 0.0; \
         inherit: "default" 0.0; \
         image.normal: IMAG2; \
      } \
   }
#define CLICK(SIG, SOUR, STATE) \
   program { \
      signal: SIG; \
      source: SOUR; \
      action: STATE_SET STATE 0.0; \
      target: SOUR; \
   }
#define INCDEC(SIG, SOUR, ACT) \
   program { \
      signal: SIG; \
      source: SOUR; \
      action: SIGNAL_EMIT ACT ""; \
   }
#define FOCUS(SIG, TARG, STATE) \
   program { \
      signal: SIG; \
      source: elm; \
      action: STATE_SET STATE 0.0; \
      target: TARG; \
   }
#define GLOW(NAME) \
   part { \
      name: NAME; \
      type: IMAGE; \
      description { \
         state: "default" 0.0; \
         visible: 0; \
         image { \
            normal: "focus-outer-glow.png"; \
            border: 3 3 4 3; \
         } \
         color: 51 153 255 255; \
         align: 0.0 0.0; \
         rel1 { \
            to: "bg"; \
            offset: -1 -2; \
         } \
         rel2 { \
            to: "bg"; \
            offset: 0 0; \
         } \
      } \
      description { \
         state: "new" 0.0; \
         inherit: "default" 0.0; \
         visible: 1; \
      } \
   }
   group {
      name: "elm/spinner/base/eflete/vertical";
      images {
         image: "spinner-vertical-down.png" COMP;
         image: "spinner-vertical-down-selected.png" COMP;
         image: "spinner-vertical-up.png" COMP;
         image: "spinner-vertical-up-selected.png" COMP;
         image: "focus-outer-glow.png" COMP;
         image: "input-text-bg.png" COMP;
      }
      parts {
         part {
            name: "bg";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
         }
         part {
            name: "back";
            type: IMAGE;
            description { state: "default" 0.0;
               min: 36 19;
               max: -1 19;
               fixed: 1 1;
               image {
                  normal: "input-text-bg.png";
                  border: 5 5 5 5;
               }
               min: 0 20;
               max: 9999 20;
               rel1 {
                  to: "bg";
                  relative: 0.0 0.0;
               }
               rel2.to: "bg";
            }
         }
         GLOW("glow");
         part { name: "elm.text";
            type: TEXT;
            mouse_events: 0;
            description { state: "default" 0.0;
               color: 213 213 213 84;
               text {
                  font: FN;
                  size: 11;
               }
               rel1.to: "back";
               rel2.to: "back";
            }
            description { state: "active" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
            description { state: "disabled_active" 0.0;
               inherit: "default" 0.0;
               color: 213 213 213 84;
               color3: 0 0 0 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 213 213 213 84;
               color3: 0 0 0 0;
            }
         }
         part {
            name: "vspacer";
            type: SPACER;
            description {
               state: "default" 0.0;
               min: 2 2;
               max: 2 2;
               align: 1.0 1.0;
               rel2 {
                  relative: 1.0 1.0;
                  to: "back";
               }
            }
         }
         part { name: "elm.dragable.slider";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
            }
            description { state: "default" 0.0;
               rel1.to: "back";
               rel2.to: "back";
               fixed: 1 1;
               color: 0 0 0 0;
            }
         }
         part { name: "button_events";
            type: RECT;
            dragable {
               events: "elm.dragable.slider";
            }
            mouse_events: 1;
            description { state: "default" 0.0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               fixed: 1 1;
               color: 0 0 0 0;
            }
         }
         part { name: "elm.swallow.entry";
            type: SWALLOW;
            description { state: "default" 0.0;
               visible: 0;
               align: 0.5 0.5;
               rel1 { relative: 0.0 0.5;
                  offset: 3 2;
                  to: "elm.text";
               }
               rel2 { relative: 1.0 0.5;
                  offset: -3 -2;
                  to: "elm.text";
               }
               fixed: 1 1;
               color: 0 0 0 0;
            }
            description { state: "active" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               color: 255 255 255 255;
            }
            description { state: "disabled_active" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "access.text";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
            }
            description { state: "disabled" 0.0;
               color: 0 0 0 0;
               rel1.to: "disabler";
               rel2.to: "disabler";
            }
         }
         BUTTON("down","spinner-vertical-down.png","spinner-vertical-down-selected.png",0.0 0.0,"vspacer", 11 8);
         BUTTON("up","spinner-vertical-up.png","spinner-vertical-up-selected.png",1.0 0.0,"down", 11 8);
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         CLICK("mouse,down,1*","down","new");
         CLICK("mouse,up,1","down","default");
         CLICK("mouse,down,1*","up","new");
         CLICK("mouse,up,1","up","default");

         INCDEC("mouse,down,1*", "down",  "elm,action,decrement,start");
         INCDEC("mouse,up,1", "down",  "elm,action,decrement,stop");
         INCDEC("mouse,down,1*", "up",  "elm,action,increment,start");
         INCDEC("mouse,up,1", "up",  "elm,action,increment,stop");

         FOCUS("elm,action,focus", "glow", "new");
         FOCUS("elm,action,unfocus", "glow", "default");

         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            action:  STATE_SET "visible" 0.0;
            target: "elm.text";
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            action:  STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "down";
            target: "up";
            target: "disabler";
            target: "access.text";
            after: "disable_text";
         }
         program { name: "disable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "active"))
                 set_state(PART:"elm.text", "disabled_active", 0.0);
               else
                 set_state(PART:"elm.text", "disabled", 0.0);
               get_state(PART:"elm.swallow.entry", st, 30, vl);
               if (!strcmp(st, "active"))
                 set_state(PART:"elm.swallow.entry", "disabled_active", 0.0);
               else
                 set_state(PART:"elm.swallow.entry", "disabled", 0.0);
            }
         }
         program { name: "enable";
             signal: "elm,state,enabled";
             source: "elm";
             action: STATE_SET "default" 0.0;
             target: "down";
             target: "up";
             target: "disabler";
             target: "access.text";
             after: "enable_text";
         }
         program { name: "enable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "disabled_active"))
                 set_state(PART:"elm.text", "active", 0.0);
               else
                 set_state(PART:"elm.text", "default", 0.0);
               get_state(PART:"elm.swallow.entry", st, 30, vl);
               if (!strcmp(st, "disabled_active"))
                 set_state(PART:"elm.swallow.entry", "active", 0.0);
               else
                 set_state(PART:"elm.swallow.entry", "default", 0.0);
            }
         }
         program { name: "active";
            signal: "elm,state,active";
            source: "elm";
            action: STATE_SET "active" 0.0;
            target: "elm.text";
            target: "elm.swallow.entry";
         }
         program { name: "inactive";
            signal: "elm,state,inactive";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
            target: "elm.swallow.entry";
         }
         program { name: "toggle_text";
            signal: "mouse,up,1";
            source: "button_events";
            action: SIGNAL_EMIT "elm,action,entry,toggle" "";
         }
      }
   }
   group {
      name: "elm/spinner/base/eflete/default";
         images {
         image: "spinner-horizontal-down.png" COMP;
         image: "spinner-horizontal-down-clicked.png" COMP;
         image: "spinner-horizontal-up.png" COMP;
         image: "spinner-horizontal-up-clicked.png" COMP;
         image: "focus-outer-glow.png" COMP;
         image: "input-text-bg.png" COMP;
      }
      parts {
         part {
            name: "bg";
            type: RECT;
            description { state: "default" 0.0;
               min: 0 20;
               max: 9999 20;
               color: 255 255 255 0;
            }
         }
         part {
            name: "back";
            type: IMAGE;
            description {state: "default" 0.0;
               min: 45 19;
               max: -1 19;
               fixed: 1 1;
                image {
                   normal: "input-text-bg.png";
                  border: 5 5 5 5;
               }
               min: 0 20;
               max: 9999 20;
               rel1 {
                  to: "bg";
                  relative: 0.0 0.0;
               }
               rel2.to: "bg";
            }
         }
         GLOW("glow");
         part { name: "elm.text";
            type: TEXT;
            mouse_events: 0;
            description { state: "default" 0.0;
               color: 213 213 213 84;
               text {
                  font: FN;
                  size: 11;
               }
               rel1 {
                  relative: 1.0 0.0;
                  to: "spacerl";
               }
               rel2 {
                  relative: 0.0 1.0;
                  to: "spacerr";
               }
            }
            description { state: "active" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
            description { state: "disabled_active" 0.0;
               inherit: "default" 0.0;
               color:  0 0 0 128;
               color3: 0 0 0 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 0 0 0 128;
               color3: 0 0 0 0;
            }
         }
         part {
            name: "spacerl";
            type: SPACER;
            description {
               state: "default" 0.0;
               min: 11 18;
               max: 11 18;
               align: 0.0 0.0;
               rel1 {
                  relative: 0.0 0.0;
                  to: "back";
               }
            }
         }
         part {
            name: "spacerr";
            type: SPACER;
            description {
               state: "default" 0.0;
               min: 2 2;
               max: 2 2;
               align: 1.0 1.0;
               rel2{
                  relative: 1.0 1.0;
                  to: "back";
               }
            }
         }
         part { name: "elm.dragable.slider";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
            }
            description { state: "default" 0.0;
               rel1.to: "back";
               rel2.to: "back";
               fixed: 1 1;
               color: 0 0 0 0;
            }
         }
         part { name: "button_events";
            type: RECT;
            dragable {
               events: "elm.dragable.slider";
            }
            mouse_events: 1;
            description { state: "default" 0.0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               fixed: 1 1;
               color: 0 0 0 0;
            }
         }
         part { name: "elm.swallow.entry";
            type: SWALLOW;
            description { state: "default" 0.0;
               visible: 0;
               align: 0.5 0.5;
               rel1 { relative: 0.0 0.5;
                  offset: 3 2;
                  to: "elm.text";
               }
               rel2 { relative: 1.0 0.5;
                  offset: -3 -2;
                  to: "elm.text";
               }
               fixed: 1 1;
               color: 0 0 0 0;
            }
            description { state: "active" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               color: 213 213 213 84;
            }
            description { state: "disabled_active" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "access.text";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
            }
            description { state: "disabled" 0.0;
               color: 0 0 0 0;
               rel1.to: "disabler";
               rel2.to: "disabler";
            }
         }
         BUTTON("downh","spinner-horizontal-down.png","spinner-horizontal-down-clicked.png",1.0 1.0,"spacerl", 9 16);
         BUTTON("uph","spinner-horizontal-up.png","spinner-horizontal-up-clicked.png",0.0 0.0,"spacerr", 9 16);
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         CLICK("mouse,down,1*","downh","new");
         CLICK("mouse,up,1","downh","default");
         CLICK("mouse,down,1*","uph","new");
         CLICK("mouse,up,1","uph","default");

         INCDEC("mouse,down,1*", "downh",  "elm,action,decrement,start");
         INCDEC("mouse,up,1", "downh",  "elm,action,decrement,stop");
         INCDEC("mouse,down,1*", "uph",  "elm,action,increment,start");
         INCDEC("mouse,up,1", "uph",  "elm,action,increment,stop");

         FOCUS("elm,action,focus", "glow", "new");
         FOCUS("elm,action,unfocus", "glow", "default");

         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            action:  STATE_SET "visible" 0.0;
            target: "elm.text";
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            action:  STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "downh";
            target: "uph";
            target: "disabler";
            target: "access.text";
            after: "disable_text";
         }
         program { name: "disable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "active"))
                 set_state(PART:"elm.text", "disabled_active", 0.0);
               else
                 set_state(PART:"elm.text", "disabled", 0.0);
               get_state(PART:"elm.swallow.entry", st, 30, vl);
               if (!strcmp(st, "active"))
                 set_state(PART:"elm.swallow.entry", "disabled_active", 0.0);
               else
                 set_state(PART:"elm.swallow.entry", "disabled", 0.0);
            }
         }
         program { name: "enable";
             signal: "elm,state,enabled";
             source: "elm";
             action: STATE_SET "default" 0.0;
             target: "downh";
             target: "uph";
             target: "disabler";
             target: "access.text";
             after: "enable_text";
         }
         program { name: "enable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "disabled_active"))
                 set_state(PART:"elm.text", "active", 0.0);
               else
                 set_state(PART:"elm.text", "default", 0.0);
               get_state(PART:"elm.swallow.entry", st, 30, vl);
               if (!strcmp(st, "disabled_active"))
                 set_state(PART:"elm.swallow.entry", "active", 0.0);
               else
                 set_state(PART:"elm.swallow.entry", "default", 0.0);
            }
         }
         program { name: "active";
            signal: "elm,state,active";
            source: "elm";
            action: STATE_SET "active" 0.0;
            target: "elm.text";
            target: "elm.swallow.entry";
         }
         program { name: "inactive";
            signal: "elm,state,inactive";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
            target: "elm.swallow.entry";
         }
         program { name: "toggle_text";
            signal: "mouse,up,1";
            source: "button_events";
            action: SIGNAL_EMIT "elm,action,entry,toggle" "";
         }
      }
   }

#undef BUTTON
#undef CLICK
#undef INCDEC
#undef FOCUS
#undef GLOW
