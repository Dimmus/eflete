group { name: "elm/check/base/eflete/toggle";
   images {
      image: "input-text-bg1.png" COMP;
      image: "toggle-on.png" COMP;
      image: "toggle-off.png" COMP;
   }
#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
   script {
      public is_rtl;
      public is_drag;
      public was_drag;
      public btmode;
      public eval_mode(m) {
         new m1 = m & MASK;
         new d = m & DISABLE;
         if (m1 == (ICON | LABEL)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
               set_state(PART:"elm.text", "visible", 0.0);
               set_state(PART:"clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
               set_state(PART:"event2", "default", 0.0);
               set_state(PART:"bg_image", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
               set_state(PART:"elm.text", "disabled_visible", 0.0);
               set_state(PART:"clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"event2", "disabled", 0.0);
               set_state(PART:"bg_image", "disabled", 0.0);
            }
         } else if (m1 == (ICON)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
               set_state(PART:"clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
               set_state(PART:"event2", "default", 0.0);
               set_state(PART:"bg_image", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
               set_state(PART:"elm.text", "disabled", 0.0);
               set_state(PART:"clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"event2", "disabled", 0.0);
               set_state(PART:"bg_image", "disabled", 0.0);
            }
         } else if (m1 == (LABEL)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "visible", 0.0);
               set_state(PART:"clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
               set_state(PART:"event2", "default", 0.0);
               set_state(PART:"bg_image", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "disabled_visible", 0.0);
               set_state(PART:"clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"event2", "disabled", 0.0);
               set_state(PART:"bg_image", "disabled", 0.0);
            }
         }
      }
   }
   parts {
      part { name: "tog";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            SET_SIZE(55, 19);
            rel1.offset: 0 1;
        }
      }
      part { name: "bg_image";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         clip_to: "tog_clip";
         description { state: "default" 0.0;
            image {
               normal: "input-text-bg1.png";
               border: 5 5 5 5;
            }
            rel1 {
               to: "tog";
               relative: 0.0 0.0;
               offset: -1 -1;
            }
            rel2 {
               to: "tog";
               relative: 1.0 1.0;
               offset: 0 -2;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "tog_clip";
         type: RECT;
         description { state: "default" 0.0;
            rel1 {
               to: "tog";
               offset: -3 -4;
            }
            rel2 {
               to: "tog";
               offset: 0 1;
            }
         }
      }
      part { name: "button";
         type: RECT;
         scale: 1;
         clip_to: "tog_clip";
         dragable {
            x: 1 1 0;
            y: 0 0 0;
            confine: "tog";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 30 17;
            max: 30 -1;
            color: 255 128 0 0;
            rel1.to: "tog";
            rel2.to: "tog";
         }
      }
      part { name: "base_but"; mouse_events: 0;
         description { state: "default" 0.0;
            min: 30 17;
            max: 30 17;
            fixed: 1 1;
            image.normal: "toggle-off.png";
            fill.smooth: 0;
            rel1.to: "button";
            rel2.to: "button";
         }
         description { state: "on_state" 0.0;
            inherit: "default" 0.0;
            image.normal: "toggle-on.png";
         }
         description { state: "off_state" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "button_events";
         type: RECT;
         dragable.events: "button";
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "clip";
         type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         clip_to: "clip";
         description { state: "default" 0.0;
            fixed: 1 0;
            visible: 0;
            align: 0.0 0.5;
            max: 0 0;
            rel1.offset: 1 1;
            rel2 {
               offset: 1 -2;
               relative: 0.0 1.0;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            fixed: 0 0;
            visible: 1;
            aspect: 1.0 1.0;
            aspect_preference: VERTICAL;
            min: 16 16;
         }
      }
      part { name: "sizer.content";
         type: TEXT;
         mouse_events:  0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            text {
               font: FN;
               size: 12;
               min: 0 0;
               text_class: "check_text";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
         description { state: "icononly" 0.0;
            inherit: "default" 0.0;
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      part { name: "elm.text";
         type: TEXT;
         mouse_events: 0;
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            color: 255 255 255 255;
            color3: 0 0 0 0;
            color_class: "check_text";
            text {
               font: FN;
               size: 12;
               min: 0 0;
               align: 1.0 0.5;
               text_class: "check";
            }
            rel1 {
               to_x: "elm.swallow.content";
               relative: 1.0 0.0;
            }
            rel2 {
               to_x: "tog";
               relative: 0.0 1.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 21 21 21 255;
            color3: 255 255 255 25;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text {
               min: 1 1;
               ellipsis: -1;
            }
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            color: 21 21 21 255;
            color3: 255 255 255 25;
            visible: 1;
            text {
               min: 1 1;
               ellipsis: -1;
            }
         }
      }
      part { name: "event2";
         type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1 {
               to_x: "tog_clip";
               relative: 1.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "event";
         type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel2.to_x: "elm.text";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
   }
   programs {
      program {
         name: "check_on";
         signal: "elm,state,check,on"; source: "elm";
         script {
            new Float:drag;
            if (get_int(is_rtl) == 0) {
               drag = 100.0;
            } else {
               drag = 0.0;
            }
            set_drag(PART:"button", drag, 0.0);
         }
         after: "butt_on";
      }
      program {
         name: "check_off";
         signal: "elm,state,check,off"; source: "elm";
         script {
            new Float:drag;
            if (get_int(is_rtl) == 0) {
               drag = 0.0;
            } else {
               drag = 100.0;
            }
            set_drag(PART:"button", drag, 0.0);
         }
         after: "butt_off";
      }
      program {
         name: "button_clicked";
         signal: "mouse,clicked,1"; source: "button";
         script {
            new Float:dx, Float:dy;
            get_drag(PART:"button", dx, dy);
            if (!get_int(was_drag)) {
               if (dx > 0.5) {
                  set_drag(PART:"button", 0.0, 0.0);
               } else {
                  set_drag(PART:"button", 1.0, 0.0);
               }
               if (((get_int(is_rtl) == 1) && (dx <= 0.5)) ||
                   (get_int(is_rtl) == 0) && (dx > 0.5)) {
                  emit("elm,action,check,off", "");
               } else {
                  emit("elm,action,check,on", "");
               }
            }
         }
      }
      program {
         name: "button_drag";
         signal: "drag"; source: "button";
         script {
            set_int(is_drag, 1);
         }
      }
      program {
         name: "button_mouse_down";
         signal: "mouse,down,1"; source: "button";
         script {
            set_int(was_drag, 0);
            set_int(is_drag, 0);
         }
      }
      program {
         name: "drag_end";
         signal: "mouse,up,1"; source: "button";
         script {
            new Float:dx, Float:dy;
            get_drag(PART:"button", dx, dy);
            if (get_int(is_drag)) {
               if (dx > 0.5) {
                 set_drag(PART:"button", 1.0, 0.0);
               } else {
                 set_drag(PART:"button", 0.0, 0.0);
               }
               if (((get_int(is_rtl) == 1) && (dx <= 0.5)) ||
                   (get_int(is_rtl) == 0) && (dx > 0.5)) {
                 emit("elm,action,check,on", "");
               } else {
                 emit("elm,action,check,off", "");
               }
               set_int(was_drag, 1);
               set_int(is_drag, 0);
            }
         }
      }
      program {
         name: "text_visible";
         signal: "elm,state,text,visible"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= LABEL; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program {
         name: "text_inivisible";
         signal: "elm,state,text,hidden"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~LABEL; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program {
         name: "icon_visible";
         signal: "elm,state,icon,visible"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= ICON; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program {
         name: "icon_invisible";
         signal: "elm,state,icon,hidden"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~ICON; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program {
         name: "disabled";
         signal: "elm,state,disabled"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= DISABLE; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program {
         name: "enabled";
         signal: "elm,state,enabled"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~DISABLE; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program {
         name: "rtl";
         signal: "edje,state,rtl"; source: "edje";
         script {
            set_int(is_rtl, 1);
         }
      }
      program {
         name: "butt_on";
         action: STATE_SET "on_state" 0.0;
         target: "base_but";
      }
      program {
         name: "butt_off";
         action: STATE_SET "of_state" 0.0;
         target: "base_but";
      }
      program {
         name: "ltr";
         signal: "edje,state,ltr"; source: "edje";
         script {
            set_int(is_rtl, 0);
         }
      }
   }
#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
}

group { name: "elm/check/base/eflete/default";
   images {
      image: "input-text-bg1.png" COMP;
      image: "checkbox-white.png" COMP;
   }
   parts {
      part { name: "bg";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            min: 20 20;
            max: 20 20;
            aspect: 1 1;
            aspect_preference: VERTICAL;
            rel1.offset: 1 1;
            rel2 {
               relative: 0.0 1.0;
               offset: 1 -2;
            }
            image {
               normal: "input-text-bg1.png";
               border: 5 5 5 5;
            }
         }
      }
      part { name: "check";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            color: 181 181 181 255;
            rel1 {
               offset: 1 1;
               to: "bg";
            }
            rel2 {
               offset: -2 -3;
               to: "bg";
            }
            image {
               normal: "checkbox-white.png";
               middle: DEFAULT;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0;
            inherit: "default" 0.0;
            visible: 0;
            color: 128 128 128 255;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 128 128 128 255;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 0.0 0.5;
            rel1 {
               relative: 1.0 0.0;
               offset: 1 1;
               to_x: "bg";
            }
            rel2 {
               offset: 1 -2;
               to_x: "bg";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.text";
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            rel1 {
               to_x: "elm.swallow.content";
               relative: 1.0 0.0;
               offset: 1 1;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -2 -2;
            }
            color: 0 0 0 255;
            text {
               font: FN;
               style: "textblock_style";
               size: 12;
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text {
               min: 1 1;
               ellipsis: -1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text{
               min: 1 1;
               ellipsis: -1;
            }
            color: 182 182 182 255;
         }
      }
      part { name: "events";
         type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "click";
         signal: "mouse,clicked,1";
         source: "events";
         action: SIGNAL_EMIT "elm,action,check,toggle" "";
      }
      program { name: "check_on";
         signal: "elm,state,check,on";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "check";
      }
      program { name: "check_off";
         signal: "elm,state,check,off";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "check";
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "elm.text";
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "elm.text";
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "elm.swallow.content";
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "elm.swallow.content";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.00;
         target: "disabler";
         after: "disable_text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "disabler";
         after: "enable_text";
      }
      program { name: "disable_text";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"elm.text", "disabled_visible", 0.0);
            else
            set_state(PART:"elm.text", "disabled", 0.0);

            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"elm.swallow.content", "disabled_visible", 0.0);
            else
            set_state(PART:"elm.swallow.content", "disabled", 0.0);

            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"check", "disabled_visible", 0.0);
            else
            set_state(PART:"check", "disabled", 0.0);
         }
      }
      program { name: "enable_text";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "disabled_visible"))
            set_state(PART:"elm.text", "visible", 0.0);
            else
            set_state(PART:"elm.text", "default", 0.0);

            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"elm.swallow.content", "visible", 0.0);
            else
            set_state(PART:"elm.swallow.content", "default", 0.0);

            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"check", "visible", 0.0);
            else
            set_state(PART:"check", "default", 0.0);
         }
      }
   }
}

group { name: "elm/check/base/eflete/widgetlist/default";
   images {
      image: "icon-treemenu-item-visibility.png" COMP;
      image: "treemenu-item-visibility-bg.png" COMP;
   }
   inherit: "elm/check/base/eflete/default";
   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            SET_SIZE(13 13, 13 13);
            align: 0.0 0.5;
            image.normal: "treemenu-item-visibility-bg.png";
            rel1.offset: 0 1;
            rel2.offset: 0 1;
         }
      }
      part { name: "check";
         description { state: "default" 0.0;
            image.normal: "icon-treemenu-item-visibility.png";
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
}
