group { name: "elm/check/base/toggle";
   script {
      public g_velocity;
      public g_timer;
      public move_button(val_on) {
         new l_timer;
         new Float:vel;
         new Float:dx, Float:dy;

         /* getting current velocity and saving increased value */
         vel = get_float(g_velocity);
         set_float(g_velocity, vel * 1.1);

         /* getting current position */
         get_drag(PART:"button", dx, dy);

         if (val_on)
         {
            /* changing button picture. this can be accidently skiped with some
               initial positions and velocity values. so we need to set it again
               during final step to be sure that it is applied*/
            if (dx > 0.6)
            {
               set_state(PART:"button", "on", 0.0);
            }
            /* moving button */
            if (dx > 1.0 - vel) /* this is last iteration, finalizing state */
            {
               set_drag(PART:"button", 1.0, 0.0);
               set_state(PART:"button", "on", 0.0);
            }
            else /* moving and sceduling next step */
            {
               set_drag(PART:"button", dx + vel, 0.0);
               l_timer = timer(0.02, "move_button", val_on);
            }
         }
         else
         {
            if (dx < 0.0 + vel)
            {
               set_drag(PART:"button", 0.0, 0.0);
               set_state(PART:"button", "default", 0.0);
            }
            else
            {
               set_drag(PART:"button", dx - vel, 0.0);
               l_timer = timer(0.02, "move_button", val_on);
            }
         }
         /* save timer id to stop it later if needed */
         set_int(g_timer, l_timer);
      }
   }
images {
   image: "input-text-bg.png" COMP;
   image: "toggle-off.png" COMP;
   image: "toggle-on.png" COMP;
}
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            visible: 0;
            align: 0.0 0.5;
            rel2 {
               relative: 0.0 1.0;
            }
         }
         description { state: "visible" 0.0;
            align: 0.0 0.5;
            min: 19 19;
            max: 0 0;
            rel2 {
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "padding.icon";
         type: SPACER;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            max: 0 -1;
            rel1 {
               relative: 1.0 0.0;
               to: "elm.swallow.content";
            }
            rel2 {
               to_y: "elm.swallow.content";
            }
         }
         description { state: "visible" 0.0;
            align: 0.0 0.5;
            min: 2 0;
            max: 2 -1;
            rel1 {
               relative: 1.0 0.0;
               to: "elm.swallow.content";
            }
            rel2 {
               to_y: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.text";
         type: TEXT;
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            visible: 0;
            align: 0.0 0.5;
            max: 0 -1;
            color: 182 182 182 255;
            rel1 {
               to_x: "padding.icon";
               relative: 1.0 0.0;
            }
            text {
               font: "Sans";
               size: 12;
               max: 1 1;
            }
         }
         description { state: "visible" 0.0;
            align: 0.0 0.5;
            color: 182 182 182 255;
            rel1 {
               relative: 1.0 0.0;
               to_x: "padding.icon";
            }
            text {
               font: "Sans";
               size: 12;
               max: 1 1;
            }
         }
      }
      part { name: "padding.text";
         type: SPACER;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            max: 0 -1;
            rel1 {
               relative: 1.0 0.0;
               to: "elm.text";
            }
            rel2 {
               to_y: "elm.text";
            }
         }
         description { state: "visible" 0.0;
            align: 0.0 0.5;
            min: 2 0;
            max: 0 -1;
            rel1 {
               relative: 1.0 0.0;
               to: "elm.text";
            }
            rel2 {
               to_y: "elm.text";
            }
         }
      }
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            min: 55 19;
            max: 55 19;
            rel1 {
               relative: 1.0 0.0;
               to_x: "padding.text";
            }
         }
      }
      part { name: "bg";
         type: IMAGE;
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1 {
               to: "base";
            }
            rel2 {
               to: "base";
            }
            image {
               normal: "input-text-bg.png";
               border: 5 5 5 5;
               middle: DEFAULT;
            }
         }
      }
      part { name: "area.drag";
         type: SPACER;
         description { state: "default" 0.0;
            rel1 {
               offset: 1 1;
               to: "base";
            }
            rel2 {
               offset: -2 -1;
               to: "base";
            }
         }
      }
      part { name: "button";
         type: IMAGE;
         scale: 1;
         clip_to: "clipper";
         dragable {
            x: 1 1 0;
            y: 0 0 0;
            confine: "area.drag";
            threshold: "elm.swallow.content";
         }
         description { state: "default" 0.0;
            min: 30 17;
            max: 30 17;
            rel1 {
               to: "area.drag";
            }
            rel2 {
               to: "area.drag";
            }
            image {
               normal: "toggle-off.png";
               middle: DEFAULT;
            }
         }
         description { state: "on" 0.0;
            min: 30 17;
            max: 30 17;
            rel1 {
               to: "area.drag";
            }
            rel2 {
               to: "area.drag";
            }
            image {
               normal: "toggle-on.png";
               middle: DEFAULT;
            }
         }
      }
      part { name: "event.button";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1 {
               to_x: "elm.swallow.content";
               to_y: "base";
            }
            rel2 {
               to: "base";
            }
         }
      }
      part { name: "clipper";
         type: RECT;
         description { state: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "elm.swallow.content";
         target: "padding.icon";
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "elm.swallow.content";
         target: "padding.icon";
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "elm.text";
         target: "padding.text";
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "elm.text";
         target: "padding.text";
      }
      program { name: "off";
         signal: "elm,state,check,off";
         source: "elm";
         script {
            /* stop transition if it's running */
            new l_timer;
            l_timer = get_int(g_timer);
            cancel_timer(l_timer);

            /* set start velocity */
            set_float(g_velocity, 0.08);

            move_button(false);
         }
      }
      program { name: "on";
         signal: "elm,state,check,on";
         source: "elm";
         script {
            /* stop transition if it's running */
            new l_timer;
            l_timer = get_int(g_timer);
            cancel_timer(l_timer);

            /* set start velocity */
            set_float(g_velocity, 0.08);

            move_button(true);
         }
      }
      program { name: "clicked_emit";
         signal: "mouse,clicked,1";
         source: "event.button";
         action: SIGNAL_EMIT "elm,action,check,toggle" "elm";
      }
      program { name: "drag_end";
         signal: "drag,stop";
         source: "button";
         script {
            new Float:dx, Float:dy;
            get_drag(PART:"button", dx, dy);
            /* tell c-part in what half button is stopped */
            if (dx > 0.5)
            {
               emit("elm,action,check,on", "elm");
            }
            else
            {
               emit("elm,action,check,off", "elm");
            }
         }
      }
   }
}

group { name: "elm/check/base/default";
   images {
      image: "input-text-bg.png" COMP;
      image: "checkbox-white.png" COMP;
   }
   parts {
      part { name: "bg";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            min: 20 20;
            max: 20 20;
            aspect: 1 1;
            aspect_preference: VERTICAL;
            rel1.offset: 1 1;
            rel2 {
               relative: 0.0 1.0;
               offset: 1 -2;
            }
            image {
               normal: "input-text-bg.png";
               border: 5 5 5 5;
            }
         }
      }
      part { name: "check";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            color: 181 181 181 255;
            rel1 {
               offset: 1 1;
               to: "bg";
            }
            rel2 {
               offset: -2 -3;
               to: "bg";
            }
            image {
               normal: "checkbox-white.png";
               middle: DEFAULT;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0;
            inherit: "default" 0.0;
            visible: 0;
            color: 128 128 128 255;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 128 128 128 255;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 0.0 0.5;
            rel1 {
               relative: 1.0 0.0;
               offset: 1 1;
               to_x: "bg";
            }
            rel2 {
               offset: 1 -2;
               to_x: "bg";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.text";
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            rel1 {
               to_x: "elm.swallow.content";
               relative: 1.0 0.0;
               offset: 1 1;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -2 -2;
            }
            color: 0 0 0 255;
            text {
               font: FN;
               style: "textblock_style";
               size: 12;
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text {
               min: 1 1;
               ellipsis: -1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text{
               min: 1 1;
               ellipsis: -1;
            }
            color: 182 182 182 255;
         }
      }
      part { name: "events";
         type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "click";
         signal: "mouse,clicked,1";
         source: "events";
         action: SIGNAL_EMIT "elm,action,check,toggle" "";
      }
      program { name: "check_on";
         signal: "elm,state,check,on";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "check";
      }
      program { name: "check_off";
         signal: "elm,state,check,off";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "check";
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "elm.text";
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "elm.text";
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         action: STATE_SET "visible" 0.00;
         target: "elm.swallow.content";
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "elm.swallow.content";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.00;
         target: "disabler";
         after: "disable_text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.00;
         target: "disabler";
         after: "enable_text";
      }
      program { name: "disable_text";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"elm.text", "disabled_visible", 0.0);
            else
            set_state(PART:"elm.text", "disabled", 0.0);

            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"elm.swallow.content", "disabled_visible", 0.0);
            else
            set_state(PART:"elm.swallow.content", "disabled", 0.0);

            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"check", "disabled_visible", 0.0);
            else
            set_state(PART:"check", "disabled", 0.0);
         }
      }
      program { name: "enable_text";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "disabled_visible"))
            set_state(PART:"elm.text", "visible", 0.0);
            else
            set_state(PART:"elm.text", "default", 0.0);

            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"elm.swallow.content", "visible", 0.0);
            else
            set_state(PART:"elm.swallow.content", "default", 0.0);

            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "visible"))
            set_state(PART:"check", "visible", 0.0);
            else
            set_state(PART:"check", "default", 0.0);
         }
      }
   }
}

group { name: "elm/check/base/widgetlist/default";
   images {
      image: "icon-treemenu-item-visibility.png" COMP;
      image: "treemenu-item-visibility-bg.png" COMP;
   }
   inherit: "elm/check/base/default";
   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            SET_SIZE(13 13, 13 13);
            align: 0.0 0.5;
            image.normal: "treemenu-item-visibility-bg.png";
            rel1.offset: 0 1;
            rel2.offset: 0 1;
         }
      }
      part { name: "check";
         description { state: "default" 0.0;
            image.normal: "icon-treemenu-item-visibility.png";
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
}

group { name: "elm/check/base/live_view";
   inherit: "elm/check/base/default";
   parts {
      part { name: "bg";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            FIXED_SIZE(16, 16);
            aspect: 1 1;
            aspect_preference: VERTICAL;
            rel1.offset: 1 1;
            rel2 {
               relative: 0.0 1.0;
               offset: 1 -2;
            }
            image {
               normal: "input-text-bg.png";
               border: 5 5 5 5;
            }
         }
      }
   }
}
