cmake_minimum_required(VERSION 2.8)
project(efl_tet C)

set(VERMAJ 0)
set(VERMIN 0)
set(VERMIC 8)
set(PACKAGE_VERSION ${VERMAJ}.${VERMIN}.${VERMIC})
set(PACKAGE "Theme Editor Tool")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

find_package(Eina REQUIRED)
   if(EINA_FOUND)
      set(have_eina "yes")
   else(EINA_FOUND)
      message(FATAL_ERROR "Can not find a Eina library.")
   endif(EINA_FOUND)
find_package(Eet REQUIRED)
   if(EET_FOUND)
      set(have_eet "yes")
   else(EET_FOUND)
      message(FATAL_ERROR "Can not find a Eet library.")
   endif(EET_FOUND)
find_package(Evas REQUIRED)
   if(EVAS_FOUND)
      set(have_evas "yes")
   else(EVAS_FOUND)
      message(FATAL_ERROR "Can not find a Evas library.")
   endif(EVAS_FOUND)
find_package(Ecore REQUIRED)
   if(ECORE_FOUND)
      set(have_ecore "yes")
   else(ECORE_FOUND)
      message(FATAL_ERROR "Can not find a Ecore library.")
   endif(ECORE_FOUND)
find_package(Ecore COMPONENTS Ecore-x)
   if(ECORE_X_FOUND)
      set(have_ecore_x "yes")
   else(ECORE_X_FOUND)
      message(FATAL_ERROR "Can not find a Ecore library component - Ecore_X.")
   endif(ECORE_X_FOUND)
find_package(Ecore COMPONENTS Ecore-Evas)
   if(ECORE_EVAS_FOUND)
      set(have_ecore_evas "yes")
   else(ECORE_EVAS_FOUND)
      message(FATAL_ERROR "Can not find a Ecore library component - Ecore_Evas.")
   endif(ECORE_EVAS_FOUND)
find_package(Eio REQUIRED)
   if(EIO_FOUND)
      set(have_eio "yes")
   else(EIO_FOUND)
      message(FATAL_ERROR "Can not find a Eio library.")
   endif(EIO_FOUND)
find_package(Edje REQUIRED)
   if(EDJE_FOUND)
      set(have_edje "yes")
   else(EDJE_FOUND)
      message(FATAL_ERROR "Can not find a Edje library.")
   endif(EDJE_FOUND)
find_package(Efreet REQUIRED)
   if(EFREET_FOUND)
      set(have_efreet "yes")
   else(EFREET_FOUND)
      message(FATAL_ERROR "Can not find a Efreet library.")
   endif(EFREET_FOUND)
find_package(Elementary REQUIRED)
   if(ELEMENTARY_FOUND)
      set(have_elementary "yes")
   else(ELEMENATRY_FOUND)
      message(FATAL_ERROR "Can not find a Elementary library.")
   endif(ELEMENTARY_FOUND)
find_package(Doxygen)
   if(DOXYGEN_FOUND)
      set(build_doc "yes")
   else(DOXYGEN_FOUND)
      set(build_doc "no")
   endif(DOXYGEN_FOUND)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall -Wextra -Werror -O2")
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall -Wextra -O2")

# target 'clear'
IF("${CMAKE_GENERATOR}" MATCHES "Make")
   ADD_CUSTOM_TARGET(fsm_clean
      COMMAND ${CMAKE_MAKE_PROGRAM} clean
      WORKING_DIRECTORY ${CMAKE_CURRENT_DIR}
      )
   ADD_DEPENDENCIES(fsm_clean FsmCompilerClean)
ENDIF("${CMAKE_GENERATOR}" MATCHES "Make")

include_directories(
   ${EINA_INCLUDE_DIRS}
   ${ECORE_INCLUDE_DIRS}
   ${EVAS_INCLUDE_DIRS}
   ${EET_INCLUDE_DIRS}
   ${EIO_INCLUDE_DIRS}
   ${EDJE_INCLUDE_DIRS}
   ${EFREET_INCLUDE_DIRS}
   ${ELEMENTARY_INCLUDE_DIRS}
   )

add_definitions("-DPACKAGE=\"${PACKAGE}\"")
#FIXME: bad define
add_definitions("-DTET_EDJ=\"${CMAKE_CURRENT_SOURCE_DIR}/data/${PROJECT_NAME}.edj\"")
add_definitions("-DTET_IMG_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}/data/images/\"")
add_definitions("-DTET_EDJ_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}/data/\"")

#add_subdirectory(po)
add_subdirectory(src)
add_subdirectory(data)
add_subdirectory(doc)

#OUTPUT
message("")
message("")
message("------------------------------------------------------------------------")
message(${PACKAGE} " " ${PACKAGE_VERSION})
message("------------------------------------------------------------------------")
message("")
message("Configuration Options Summary:")
message("")
message("  eina...........: " ${have_eina})
message("  eet............: " ${have_eet})
message("  evas...........: " ${have_evas})
message("  ecore..........: " ${have_ecore})
message("    ecore-x......: " ${have_ecore_x})
message("    ecore-evas...: " ${have_ecore_evas})
message("  eio............: " ${have_eio})
message("  edje...........: " ${have_edje})
message("  efreet.........: " ${have_efreet})
message("  elementary.....: " ${have_elementary})
message("")
message("  Documentation..: " ${build_doc})
message("")
message("Compilation......: make")
message("CPPFLAGS.........: " ${CMAKE_CXX__FLAGS})
message("CFLAGS...........: " ${CMAKE_C_FLAGS})
message("LDFLAGS..........: " )
message("")
message("Installation.....: no target (TBD)")
message("")
